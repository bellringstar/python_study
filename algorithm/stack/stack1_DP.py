'''
stack : 물건을 쌓아 올리듯 자료를 쌓아 올린 형태의 자료구조
스택에 저장된 자료는 선형구조를 가짐
선형구조 : 자료 간의 관계가 1대1의 관계
비선형구조 : 자료 간의 관계가 1대 N의 관계를 가짐 ex)트리
스택에서는 마지막에 삽입한 자료를 가장 먼저 꺼냄 LIFO 후입선출

필요조건
1. 자료를 선형으로 저장할 저장장소 ex)배열, 리스트
마지막에 삽입된 원소의 위치 = top
연산
1.삽입 : push
2.삭제 : pop
3.isEmpty: 공백?
4.peek: top에 있는 item 반환

스택 구현 고려사항
1. 리스트를 사용하여 스택을 구현하는 경우
장점: 구현이 용이하다
단점: 리스트의 크기를 변경하는 작업은 내부적으로 큰 overhead 발생 작업으로 많은 시간이 소요
-> 해결법 
1.리스트의 크기가 변동되지 않도록 배열처럼 크기를 미리 정해놓고 사용하는 방법
2.동적 연결리스트를 이용하여 저장소를 동적으로 할당하여 스택을 구현하는 방법
장점: 구현이 용이하다
단점: 리스트로 구현하는 것보다 구현이 복잡하다

응용1. 괄호검사
1. 왼쪽 괄호의 개수가 오른쪽 괄호의 개수가 같아야 함
2. 같은 괄호에서 왼쪽 괄호는 오른쪽 괄호보다 먼저 나와야 함
3. 괄호 사이에는 포함 관계만 존재함
스택을 이용해 '('는 push ')'를 만나면 pop 하면 마지막에 빈 스택이라면 옳바른 상황

응용2. 함수 호출 관리
프로그램에서의 함수 호풀과 복귀에 따른 수행 순서를 관리
가장 마지막에 호출된 함수가 가장 먼저 실행을 완료하고 복귀하는 후입선출 구조. = 스택과 유사
1. 함수 호출이 발생하면 호출한 함수 수행에 필요한 지역변수, 매개변수 및 수행 후 복귀할 주소 등의 정보를 스택 프레임에 저장해
시스템 스택에 삽입
2. 함수의 실행이 끝나면 시스템 스택의 top 원소를 삭제 하면서 프레임에 저장되어있던 복귀주소를 확인하고 복귀
3. 함수 호출과 복귀에 따라 이 과정을 반복하여 전체 프로그램 수행이 종료되면 시스템 스택은 공백 스택이 됨

재귀호출
1. 자기 자신을 호출하여 순환 수행
2. 함수에서 실행해야 하는 작업의 특성에 따라 일반적인 호출방식보다 재귀 호출 방식을 사용하여 함수를 만들면
프로그램의 크기를 줄이고 간단하게 작성할 수 있음
3. 하지만 디버깅이 어렵고 잘못 작성시 수행시간이 오래걸리게 됨

Memoization
컴퓨터 프로그램을 실행할 때 이전에 계산한 값을 메모리에 저장하여 매번 다시 계산하지 않도록 하여 전체적인 실행속도 상승
DP(동적계획법)의 핵심
ex)피보나치수열
#memo를 위한 리스트 생성
#memo[0]을 0으로 memo[1]을 1로 초기화

def fibo1(n):
    global memo
    if n>=2 and len(memo)<=n :
        memo.append(fibo1(n-1) + fibo1(n-2))
    return memo[n]
memo = [0, 1]

DP(동적계획법) Dynamic Programming
그리디 알고리즘과 같이 최적화 문제를 해결하는 알고리즘
1. 입력 크기가 작은 부분 문제들을 모두 해결한 후에 그 해들을 이용하여 보다 큰 크기의 부분 문제들을 해결
2. 최종적으로 원래 주어진 입력읨 문제를 해결

def fibo2(n):
    f = [0, 1]

    for i in range(2, n+1):
        f.append(f[i-1] + f[i-2])
    return f[n]

DP 구형 방식
1. recursive 방식 (fibo1())
재귀적 구조는 내부에 시스템 호출 스택을 사용하는 overhead가 발생할 수 있음
2. iterative 방식 (fibo2())
Memoization을 재귀적 구조에 사용하는 것보다 반복적 구조로 DP를 구현한 것이 성능 면에서 보다 효율적

DFS(깊이 우선 탐색)
비선형구조인 그래프 구조는 그래프로 표현된 모든 자료를 빠짐없이 검색하는 것이 중요
1. 깊이 우선 탐색 DFS(Depth First Search)
2. 너비 우선 탐색 BFS(Breadth First Search)

DFS방법
1. 시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지 깊이 탐색
2. 더 이상 갈 곳이 없게 되면, 가장 마지막에 만났던 갈림길 간선이 있는 정점으로 되돌아옴
3. 다른 방향의 정점으로 탐색을 계속 반복하여 결구 모든 정점을 방문하여 순회
->가장 마지막에 만났던 갈림길의 정점으로 되돌아 가서 다시 깊이 우선 탐색을 반복해야 하므로 후입선출 구조의 스택을 사용

1. 시작정점 v를 결정하여 방문
정점 v에 인접한 정점 중에서
1-1. 방문하지 않은 정점 w가 있으면, 정점 v를 스택에 push하고 정점 w를 방문
-> w를 v로 하여 다시 반복
1-2. 방문하지 않은 정점이 없으면, 탐색의 방향을 바꾸기 위해서 스택을 pop하여 받은 가장 마지막 방문 정점을 v로 하여 반복

visited[], stack[] 초기화
DFS(v)
    v 방문;
    visited[v] <-true;
    do {
        if (v의 인접 정점 중 방문 안 한 w 찾기)
            push(v)
        while(w){
            w 방문;
            visited[w]<-true;
            push(w)
            v<-w;
            v의 인접 정점 중 방문 안 한 w 찾기
        }
        v<-pop(stack);
    }while(v)
end DFS()
다시 돌아오기 위해 사용한 자료구조 = 스택
'''
