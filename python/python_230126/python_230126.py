'''
shallow copy vs deep copy(mutable 관한 이야기)
변수명 = 주소값을 가리키는 이름
하나의 기억에 하나의 주소가 필요 -> 100개를 저장하려면 주소가 100개 필요
-> 하나의 주소로 찾어걸 수 없나?
1. 연속적인 공간에 데이터가 저장되도록 함 = 첫 주소만 알면 다음 것을 알 수 있다.
얕은 복사 = 메모리 주소가 같다. 같은 곳을 가리킴
깊은 복사 = 새로운 메모리 공간에 값만 복사
복사방법
1. 할당 '='
2. 얕은 복사
3. 깊은 복사
할당연산자를 통한 복사는 객체에 대한 객체 참조를 복사. (참조 => 주소)
slice 연산자[:]를 활용한 복사는 다른 주소에 할당 하지만 '얕은 복사'
ex) lst = [1,2 ['a', 'b']] 1저장 2저장 3번째 자리에 'a'가 저장된 주소 저장 
다른 메모리 ('a' 저장, 'b'저장)
lst[3] = ['a', 'b']가 저장된 주소 -> ['a', 'b']를 찾아감
: lst는 리스트 시작인 1이 저장된 주소를 가리킴.
[:]은 해당 리스트의 원소를 복사해 새로운 메모리에 할당. 하지만 해당 원소에
리스트의 주소가 들어있다? 그것을 수정하면 결국 원본도 변한다.
결국 깊은 복사가 되려면 참조의 참조까지 새로운 메모리에 할당 되어야함
ex)내부 리스트 조차 새로운 메모리에 할당해서 복사해야함
결국 [:]은 애매하다. 주의해야한다.

import copy
b = copy.deepcopy(a) : a을 깊은 복사

'''

