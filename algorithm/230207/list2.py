'''
search: 원하는 항목을 저장된 자료에서 찾는 작업
목적하는 탐색 키를 가진 항목을 찾는 것 -> 탐색키 : 자료를 구별하여 인식할 수 있는 키
1. 순차 검색
2. 이진 검색
3. 해쉬

1. 순차 검색
일렬로 되어 있는 자료를 순차적으로 검색 -> 직관적, 간단 하지만 검색 대상 수가 많은 경우 수행 시간 급증

2. 이진 검색
자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 범위를 결정하고 검색을 계쏙 진행하는 방법
목적 키를 찾을 때 까지 이진 검색을 순환적으로 반복 수행함으로써 검색 범위를 반으로 줄여가면서 보다 빠르게 검색 수행
정렬된 상태의 자료에서 가능
'''
def binartS(a, N, key):
    start = 0
    end = N - 1
    while start <= end : #검색 구간이 남아 있으면
        mid = (start + end) // 2
        if a[mid] == key: #검색 성공
            return True
        elif a[mid] > key:
            end = mid - 1
        else:
            start = mid + 1
    return False #검색 실패
'''
인덱스
Database에서 유래, 테이블에 대한 동작 속도를 높여주는 자료 구조.
인덱스를 저장하는데 필요한 디스크 공간은 보통 테이블을 저장하는데 필요한 디스크 공간보다 작다.
왜냐하면 보통 인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목들은 갖고 있지 않기 때문이다.

**선택 정렬**
오름차순
1. 주어진 리스트 중에서 최소값을 찾는다.
2. 그 값을 리스트의 맨 앞에 위치한 값과 교환한다. -> 하나의 자리 고정
3. 맨 처음 위치를 제외한 나머지 리스트를 대상으로 위의 과정을 반복한다.
O(n**2)
'''
def selectionS(a, N):
    for i in range(N-1):
        minIdx = i
        for j in range(i+1, N):
            if a[minIdx] > a[j]:
                minIdx = j
        a[i], a[minIdx] = a[minIdx], a[i]

'''
selection algorithm
저장되어 있는 자료로부터 k 번째로 큰 혹은 작은 원소를 찾는 방법
ex)선택정렬의 과정 중 k번쨰 과정의 첫 원소 = k번째 작은 우너소
1. 정렬 알고리즘을 이용하여 자료 정렬
2. 원하는 순서에 있는 자료 가져오기
k가 비교적 잘으 때 유용
'''

